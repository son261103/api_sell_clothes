package com.example.api_sell_clothes.Controller;

import com.example.api_sell_clothes.DTO.RolesDTO;
import com.example.api_sell_clothes.Entity.Users;
import com.example.api_sell_clothes.Service.RoleService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/roles")
@RequiredArgsConstructor
public class RoleController {

    private final RoleService roleService;

    // API lấy thông tin vai trò theo ID
    @GetMapping("/{id}")
    @PreAuthorize("hasAnyRole('ADMIN', 'SUPER_ADMIN')")
    public ResponseEntity<RolesDTO> getRoleById(@PathVariable Long id) {
        RolesDTO role = roleService.getRoleById(id);
        return ResponseEntity.ok(role);
    }

    // API lấy thông tin vai trò theo tên
    @GetMapping("/name/{name}")
    @PreAuthorize("hasAnyRole('ADMIN', 'SUPER_ADMIN')")
    public ResponseEntity<RolesDTO> getRoleByName(@PathVariable String name) {
        RolesDTO role = roleService.getRoleByName(name);
        return ResponseEntity.ok(role);
    }

    // API lấy danh sách tất cả vai trò
    @GetMapping
    @PreAuthorize("hasAnyRole('ADMIN', 'SUPER_ADMIN')")
    public ResponseEntity<List<RolesDTO>> getAllRoles() {
        List<RolesDTO> roles = roleService.getAllRoles();
        return ResponseEntity.ok(roles);
    }

    // API tạo vai trò mới
    @PostMapping
    @PreAuthorize("hasAnyRole('ADMIN', 'SUPER_ADMIN')")
    public ResponseEntity<RolesDTO> createRole(@RequestBody RolesDTO roleDTO) {
        RolesDTO newRole = roleService.createRole(roleDTO);
        return ResponseEntity.ok(newRole);
    }

    // API cập nhật vai trò
    @PutMapping("/{id}")
    @PreAuthorize("hasAnyRole('ADMIN', 'SUPER_ADMIN')")
    public ResponseEntity<RolesDTO> updateRole(@PathVariable Long id, @RequestBody RolesDTO roleDTO) {
        RolesDTO updatedRole = roleService.updateRole(id, roleDTO);
        return ResponseEntity.ok(updatedRole);
    }

    // API xóa vai trò
    @DeleteMapping("/{id}")
    @PreAuthorize("hasAnyRole('ADMIN', 'SUPER_ADMIN')")
    public ResponseEntity<Void> deleteRole(@PathVariable Long id) {
        roleService.deleteRole(id);
        return ResponseEntity.noContent().build();
    }

    // API thêm vai trò mặc định cho người dùng
    @PostMapping("/addDefaultRole/{userId}")
    @PreAuthorize("hasAnyRole('ADMIN', 'SUPER_ADMIN')")
    public ResponseEntity<Void> addDefaultRoleToUser(@PathVariable Long userId) {
        roleService.addDefaultRole(new Users(userId)); // Giả sử hàm khởi tạo user mới với userId
        return ResponseEntity.ok().build();
    }

    // API thêm vai trò admin cho người dùng
    @PostMapping("/addAdminRole/{userId}")
    @PreAuthorize("hasAnyRole('ADMIN', 'SUPER_ADMIN')")
    public ResponseEntity<Void> addAdminRoleToUser(@PathVariable Long userId) {
        roleService.addAdminRole(new Users(userId));
        return ResponseEntity.ok().build();
    }

    // API thêm vai trò super admin cho người dùng
    @PostMapping("/addSuperAdminRole/{userId}")
    @PreAuthorize("hasRole('SUPER_ADMIN')")
    public ResponseEntity<Void> addSuperAdminRoleToUser(@PathVariable Long userId) {
        roleService.addSuperAdminRole(new Users(userId));
        return ResponseEntity.ok().build();
    }

    // API thêm nhiều vai trò cho một người dùng
    @PostMapping("/addRoles/{userId}")
    @PreAuthorize("hasAnyRole('ADMIN', 'SUPER_ADMIN')")
    public ResponseEntity<Void> addMultipleRolesToUser(@PathVariable Long userId, @RequestBody List<String> roleNames) {
        Users user = new Users(userId);
        for (String roleName : roleNames) {
            switch (roleName.toUpperCase()) {
                case "USER":
                    roleService.addDefaultRole(user);
                    break;
                case "ADMIN":
                    roleService.addAdminRole(user);
                    break;
                case "SUPER_ADMIN":
                    roleService.addSuperAdminRole(user);
                    break;
                default:
                    throw new IllegalArgumentException("Không tìm thấy vai trò với tên: " + roleName);
            }
        }
        return ResponseEntity.ok().build();
    }
}
